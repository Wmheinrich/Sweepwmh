/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

behaviors {
        pht: positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1>;    // <---[[the W key]]
        };
    };

&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
        

#define DEFAULT 0
#define LEFT   1
#define TRI   2 
#define RIGHT   3

    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&mt LGUI Q &kp W &kp E &kp R &kp T 						&kp Y &kp U  &kp I    &kp O   &kp P 
		&kp A &kp S &kp D &kp F &kp G 			        	        &kp H &kp J &kp K &kp L &kp SQT
		&mt LCRTL Z &kp X &kp C &kp V &kp B				        &kp N &kp M  &kp COMMA &kp FSLH
          				&lt 3 TAB &lt 2 BSPC  				&mt RSHFT SPACE &lt 1 ENTER
		>;
		};

       		left_layer {
		bindings = <
		&kp ESC  &kp FSLH    &kp STAR    &kp MINUS    &kp PLUS		&kp LNLCK &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp DEL 
		&kp LALT    &kp LGUI    &kp UP      &kp LPAR     &kp RPAR 		&kp DOT &kp KP_N4  &kp KP_N5 &kp KP_N6  &kp EQUAL 
		&kp LCRTL    &kp LEFT 	&kp DOWN &kp RIGHT  &kp DEL     	&kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp RET 
					    &TRANS  &TRANS  					&TRANS &TRANS 
		>;
		};
		
		right_layer {
		bindings = <
		&kp CMMS  &kp KP_N7 &kp KP_N8  &kp KP_N9  &kp PLUS    			&kp STAR  &kp F1 &kp F2 &kp F3 &kp F4 
		&kp DOT  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp MINUS 			&kp FSLH &kp F5  &kp F6  &kp F7   &kp F8
		&kp KP_N0  &kp KP_N1 &kp KP_N2 &kp KP__N3   &kp EQUAL    			&RESET  &kp F9 &kp F10 &kp F11  &kp F12
					  &TRANS &TRANS  				&TRANS  &TRANS 
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp EXCL  &kp AT    &kp HASH    &kp DLLR    &kp PRCNT 			&KP CARET &KP AMPS   &KP STAR   &KP LPAR  &KP RPAR
		&kp K_PP &kp K_PREV &kp K_VOL_DOWN &kp K_VOL_UP &kp K_NEXT  		&KP PG_UP &kp HOME  &kp UP &kp END &KP SEMI 
		&KP LCRTL  &KP LGUI &KP LALT &kp DEL &kp ESC  				&KP PG_DN &kp LEFT  &kp DOWN  &KP RIGHT &KP CAPS   
					 &trans &trans  					&trans &trans 
		>;
		};	
        
	};
};
